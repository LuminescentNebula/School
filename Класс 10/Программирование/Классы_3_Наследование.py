#Часть 2: Наследование

#Наследование позволяет создавать новый класс на основе уже существующего класса.

#Наряду с инкапсуляцией наследование является одним
# из краеугольных камней объектно-ориентированного программирования.

#Класс от которого наследуются называется суперклассом или родительским или базовым классом
#Класс который наследует называется дочерним или производным

#Создадим класс Car, который имеет метод move
class Car:
    def __init__(self,wheels):
        self.__wheels=wheels

    def move(self):
        print("Брррррр")

#Создадим дочерний класс Auto, который будет наследовать класс Car
#Чтобы указать наследование, мы пишем родительский класс в скобочках после названия класса
class Auto(Car):
    #Мы можем не указывать конструктор здесь, поскольку он полностью наследуется от родительского класса

    #Внутри дочернего класса мы можем создать метод с таким же название как у родителя.
    #Это называется перегрузкой метода. Мы заменим реализацию которая была в родительском классе на новую.
    def move(self):
        print("Бжжжжжжжжж")

#Дочерних классов может быть сколько угодно
class Truck(Car):
    #Если мы хотим не заменять, а расширить метод, то мы можем вызвать родительский метод внутри перегруженного
    def move(self):
        #super() - обращение к родителю
        #потом через . мы вызываем нужный метод
        super().move()
        print("Бр-Бр-Бр-Бр")


auto=Auto(4)
truck=Truck(6)

auto.move()
print()

#Поскольку мы перегрузили метод и в нем вызвали родительский метод, то при вызове
#Будет вызван сначала метод дочернего класс (Truck), а из него будет вызван родительский (Car) метод
truck.move()
