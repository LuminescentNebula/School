#ООП - объектно-ориентированное программирование
#Основные принципы ООП: инкапсуляция, наследование, абстракция и полиморфизм
#Часть 1: Инкапсуляция

#Суть инкапсулция заключается в том, что мы не даем прямого доступа к данным класса
#Если в предыдущем примере мы просто записывали в поле класса новое значение, то
#То согласно инкапсуляции класс сам должен знать как устанавливать себе данные, поэтому
#мы закрываем прямой доступ к полям и заменяем его методами, через которые мы передаем данные
class Person:
    #Внутри класса
    def __init__(self,name,age):
        #С помощью __ (два нижних подчеркивания) перед именем поля
        #мы можем указать, что поле является закрытым
        #К закрытому полю нельзя обратиться снаружи класса
        #__name - закрытое (приватное) поле
        #age - открытое (публичное) поле
        self.__name=name
        self.age=age

    #С закрытыми полями нужно работать через
    #методы-геттеры, которые позволяют получить значение поля
    #методы-сеттеры, которые позовляют изменить значение поля

    #Геттер - позволяет получить значение поля
    def get_name(self):
        return self.__name

    #Сеттер - позволяет изменить значение поля
    def set_name(self,name):
        #Мы можем обращаться здесь к полю, потому что мы находимся внутри класса
        self.__name=name
        
    def print_person(self):
        print(self.__name, self.age)

#Снаружи класса
tom = Person("Tom", 16)
#Строка ниже работала раньше, но теперь будет выдавать ошибку
#print(tom.name)
print(tom.get_name())
tom.set_name("Thomas")
tom.print_person()
