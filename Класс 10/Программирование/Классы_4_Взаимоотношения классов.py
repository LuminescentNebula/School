# Понятие тип обозначает, что объект принадлежит к какому-то классу.
# Стандартные типы - это тоже классы.
# Например, 4 - объект класс int, "Строка" - объект класса str
# Python имеет динамическую типизацию, поэтому мы можем не указывать какого именно типа переменная и менять этот тип
# НО, поскольку тема ООП глубоко связана с типами, а мы изучаем не язык Python, а программирование в целом,
# то с этого момента мы будем везде указывать тип объектов. Везде.

#Но это нам не поможет. Типизация в Python будет всё еще не строгой,
# но по крайней мере мы сможем видеть какие типы у переменных и что возвращают методы,
# а Pycharm как умная IDE будет выдавать вам предупреждения, если вы нарушаете указанные типы

class Car:
    # Указываем, что wheeels должен быть int
    def __init__(self, wheels: int):
        print("Конструктор car")
        self.__wheels: int = wheels

    # Указываем после -> какой тип должен возвращать метод
    # Если ничего не возвращает, то None
    def move(self) -> None:
        print("Звук машины:", "Брррррр")


class Truck(Car):
    def move(self) -> None:
        super().move()
        print("Звук грузовика:", "Бр-Бр-Бр-Бр")

    def carry(self, load:str) -> None:
        print("Перевозим", load)


class MegaTruck(Truck):
    def move(self) -> None:
        super().move()
        print("Звук мегагрузовика:", "Др-Дыр-Др-Др")

    def carry(self, load:str) -> None:
        print("Мегаперевозим", load)
        super().carry("Мегаперевезенный " + load)


truck: MegaTruck = MegaTruck("t")
truck.move()
print()
truck.carry("груз")
